import org.objectweb.asm.*

import java.nio.file.Files

plugins {
    id 'fabric-loom' version '1.8-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "fluxcore" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven {
        name = "OffsetMods538"
        url = "https://maven.offsetmonkey538.top/releases"
        content {
            includeGroup "top.offsetmonkey538.meshlib"
        }
    }

    maven {
        name = "DevAuth"
        url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1"
        content {
            includeGroup "me.djtheredstoner"
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "com.zaxxer:HikariCP:4.0.3"

    implementation "org.ow2.asm:asm:$asm_version"

    modImplementation "top.offsetmonkey538.meshlib:mesh-lib:$meshlib_version+$minecraft_version"

}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

task modifyJavaField {
    doLast {
        def classFile = file("build/classes/java/main/me/quickscythe/$archives_base_name/Initializer.class")
        def classReader = new ClassReader(Files.newInputStream(classFile.toPath()))
        def classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES)
        def mversion = mod_version.toString()
        def mname = mod_name.toString()
        def mid = archives_base_name.toString()
        classReader.accept(new ClassVisitor(Opcodes.ASM9, classWriter) {
            @Override
            MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {
                MethodVisitor mv = super.visitMethod(access, name, descriptor, signature, exceptions)
                if (name == "onInitialize") { // Target the specific method
                    return new MethodVisitor(Opcodes.ASM9, mv) {
                        @Override
                        void visitCode() {
                            super.visitCode()
                            // Inject code at the beginning of the method
                            mv.visitVarInsn(Opcodes.ALOAD, 0)
                            mv.visitLdcInsn(mversion)
                            mv.visitFieldInsn(Opcodes.PUTFIELD, "me/quickscythe/$archives_base_name/Initializer", "VERSION", "Ljava/lang/String;")
                        }
                    }
                }
                return mv
            }
        }, 0)

        Files.write(classFile.toPath(), classWriter.toByteArray())
    }
}
//compileJava.finalizedBy modifyJavaField
jar.dependsOn modifyJavaField

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}


// configure the maven publication
publishing {
    publications {
        create("maven", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
